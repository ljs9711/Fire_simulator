using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{

    //이동
    [SerializeField]
    private float walkSpeed;
    [SerializeField]
    private float runSpeed;
    private float applySpeed;
    [SerializeField]
    private float crouchSpeed; //앉은상태 스피드

    [SerializeField]
    private float jumpForce;

    //상태 변수
    private bool isWalk = false;
    private bool isRun = false;
    private bool isGround = true;
    private bool isCrouch = false;

    //움직임 체크 변수
    private Vector3 lastPos;


    //앉았을 때 얼마나 앉을지 결정하는 변수
    [SerializeField]
    private float crouchPosY;
    private float originPosY;
    private float applyCrouchY;

    //민감도
    [SerializeField]
    private float lookSensitivity;

    //카메라 한계
    [SerializeField]
    private float cameraRotationLimit;
    private float currentCameraRotationX = 0;
    private float pausedCameraRotationX; // 일시정지 전의 상하 회전값

    //컴포넌트
    [SerializeField]
    private Camera theCamera;
    private Rigidbody myRigid;
    private GunController theGunController;
    private Crosshair theCrosshair;
    private StatusController theStatusController;
    private WeaponSway weaponSway;

    //땅 착지 여부
    private CapsuleCollider capsuleCollider;


    // Start is called before the first frame update
    void Start()
    {
        myRigid = GetComponent<Rigidbody>();
        capsuleCollider = GetComponent<CapsuleCollider>();
        theGunController = FindObjectOfType<GunController>();
        theCrosshair = FindObjectOfType<Crosshair>();
        theStatusController = FindObjectOfType<StatusController>();

        //초기화
        applySpeed = walkSpeed;
        originPosY = theCamera.transform.localPosition.y; //player 기준으로 카메라가 내려가야해서 localPosition 사용
        applyCrouchY = originPosY;
    }

    // Update is called once per frame
    void Update()
    {
        IsGround();

        TryJump();

        TryRun();

        TryCrouch();

        Move();

        CameraRotation();

        CharacterRotation();


    }
    private void FixedUpdate()
    {
        MoveCheck();
    }


    //*****************함수*****************



    //앉기시도
    private void TryCrouch()
    {
        if (Input.GetKeyDown(KeyCode.LeftControl))
        {
            Crouch();
        }

    }
    //앉기 동작
    private void Crouch()
    {
        isCrouch = !isCrouch;
        theCrosshair.CrouchingAnimation(isCrouch);

        if (isCrouch)
        {
            applySpeed = crouchSpeed;
            applyCrouchY = crouchPosY;

        }
        else
        {
            crouchSpeed = walkSpeed;
            applyCrouchY = originPosY;
        }

        if (isWalk) //걷기 도중 앉으면 walk 애니메이션 실행되는 문제 해결
        {
            isWalk = false;
            theCrosshair.WalkingAnimation(isWalk);
        }

        StartCoroutine(CrouchCoroutine());
    }


    //부드러운 앉기 동작 실행
    IEnumerator CrouchCoroutine()
    {
        float _posY = theCamera.transform.localPosition.y;
        int count = 0;

        while (_posY != applyCrouchY)
        {
            count++;
            _posY = Mathf.Lerp(_posY, applyCrouchY, 0.015f); // 보간함수 사용하여 자연스럽게 앉기 / 단점은 0.9999에서 1로 올라가지 않아 count 변수사용
            theCamera.transform.localPosition = new Vector3(0, _posY, 0);
            if (count > 500)
            {
                break;
            }

            yield return null;
        }
        theCamera.transform.localPosition = new Vector3(0, applyCrouchY, 0f);

    }


    //점프 시도
    private void TryJump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && isGround && theStatusController.GetCurrentSP() > 0)
        {
            Jump();
            isGround = false;
        }
    }


    //점프
    private void Jump()
    {
        //앉은 상태에서 점프시 앉은 상태 해제
        if (isCrouch)
        {
            Crouch();
        }

        theStatusController.DecreaseStamina(100);
        myRigid.velocity = transform.up * jumpForce;
    }

    //지면체크
    private void IsGround()
    {                                                                //캡슐콜라이더 영역의 Y 의 절반+ 0.1f(계단,대각등 판정 위해)
        isGround = Physics.Raycast(transform.position, Vector3.down, capsuleCollider.bounds.extents.y + 1f); //고정된 좌표 사용하기위해 Vector3 사용
        theCrosshair.JumpingAnimation(!isGround);
    }


    //달리기 시도
    private void TryRun()
    {
        if (Input.GetKey(KeyCode.LeftShift) && theStatusController.GetCurrentSP() > 0)
        {
            Running();
        }
        if (Input.GetKeyUp(KeyCode.LeftShift) || theStatusController.GetCurrentSP() <= 0)
        {
            RunningCancel();
        }
    }

    //달리기 실행
    private void Running()
    {
        //앉은 상태에서 달리기시 앉은 상태 해제
        if (isCrouch)
        {
            Crouch();
        }

        theGunController.CancelFineSight();

        isRun = true;
        theCrosshair.RunningAnimation(isRun);
        theStatusController.DecreaseStamina(10);
        applySpeed = runSpeed;
    }

    //달리기 취소
    private void RunningCancel()
    {
        isRun = false;
        theCrosshair.RunningAnimation(isRun);
        applySpeed = walkSpeed;
    }


    //상하 카메라 회전
    public void CameraRotation()
    {
        float _xRotation = Input.GetAxisRaw("Mouse Y");
        float _cameraRotationX = _xRotation * lookSensitivity;

        if (!GameManager.isPause)
        {
            currentCameraRotationX -= _cameraRotationX;
            currentCameraRotationX = Mathf.Clamp(currentCameraRotationX, -cameraRotationLimit, cameraRotationLimit);
        }
        else
        {
            currentCameraRotationX = pausedCameraRotationX;
        }

        theCamera.transform.localEulerAngles = new Vector3(currentCameraRotationX, 0f, 0f);
    }

    //좌우 캐릭터회전
    public void CharacterRotation()
    {
        float _yRotation = Input.GetAxisRaw("Mouse X");
        Vector3 _characterRotationY = new Vector3(0f, _yRotation, 0f) * lookSensitivity;
        myRigid.MoveRotation(myRigid.rotation * Quaternion.Euler(_characterRotationY));
    }


    //움직임 실행
    public void Move()
    {
        float moveDirectionX = Input.GetAxisRaw("Horizontal");
        float moveDirectionZ = Input.GetAxisRaw("Vertical");

        Vector3 moveHorizontal = transform.right * moveDirectionX;
        Vector3 moveVertical = transform.forward * moveDirectionZ;

        Vector3 Velocity = (moveHorizontal + moveVertical).normalized * applySpeed;

        myRigid.MovePosition(transform.position + Velocity * Time.deltaTime); // Time.deltaTime 시간동안 velocity 만큼 움직임
    }

    public void MoveCheck() //크로스헤어 플레이어 위치 체크
    {
        if (!isRun && !isCrouch && isGround)
        {
            if (Vector3.Distance(lastPos, transform.position) >= 0.01f) //전 프레임과 현재 위치값이 0.01f 보다 작으면 가만있는것
                isWalk = true;
            else
                isWalk = false;

            theCrosshair.WalkingAnimation(isWalk);
            lastPos = transform.position;
        }
    }


    ////////////PasuseMenu////////////////
    
    public void PauseMovement()
    {
        isWalk = false;
        isRun = false;
        isCrouch = false;
        applySpeed = 0f; // 움직임 속도를 0으로 설정
        // 현재의 상하 회전값을 저장
        pausedCameraRotationX = currentCameraRotationX;
        // 카메라의 상하 회전값을 일시정지
        currentCameraRotationX = 0f;

        // WeaponSway의 sway 효과 일시정지
        if (weaponSway != null)
            weaponSway.PauseSway();
    }

    public void ResumeMovement()
    {
        applySpeed = walkSpeed; // 움직임 속도를 다시 초기화
        // 저장된 상하 회전값을 다시 적용
        currentCameraRotationX = pausedCameraRotationX;

        // WeaponSway의 sway 효과 해제
        if (weaponSway != null)
            weaponSway.ResumeSway();
    }


}
